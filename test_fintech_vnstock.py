# ===========================================
# üß™ TEST CASES CHO FINtech VNSTOCK ONLY
# ===========================================
# File n√†y ch·ª©a c√°c test cases ƒë·ªÉ ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn c·ªßa code
# S·ª≠ d·ª•ng unittest framework c·ªßa Python

import unittest
import sys
import os
from unittest.mock import Mock, patch, MagicMock
import pandas as pd

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path ƒë·ªÉ import module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import module c·∫ßn test
from fintech_vnstock_only import valuation_metrics, display_results, save_to_file

class TestVnstockValuationMetrics(unittest.TestCase):
    """
    Test class cho c√°c h√†m trong fintech_vnstock_only.py
    
    M·ª•c ƒë√≠ch: Ki·ªÉm tra xem c√°c h√†m c√≥ ho·∫°t ƒë·ªông ƒë√∫ng kh√¥ng
    - Test v·ªõi d·ªØ li·ªáu h·ª£p l·ªá
    - Test v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    - Test error handling
    - Test edge cases
    """
    
    def setUp(self):
        """
        Setup method - ch·∫°y tr∆∞·ªõc m·ªói test case
        Kh·ªüi t·∫°o d·ªØ li·ªáu test v√† mock objects
        """
        self.test_ticker = "FPT"  # M√£ c·ªï phi·∫øu test
        self.mock_fundamental_data = {
            'pe': 15.5,
            'pb': 2.1,
            'roe': 18.5,
            'debt_equity': 0.8,
            'market_cap': 50000000000,  # 50 t·ª∑ VND
            'dividend_yield': 3.2,
            'eps_growth': 12.5
        }
        self.mock_financial_data = {
            'current_ratio': 1.8,
            'net_income': 1000000000  # 1 t·ª∑ VND
        }
        self.mock_price_data = pd.DataFrame({
            'close': [95000, 96000, 97000, 98000, 99000]
        })

    @patch('fintech_vnstock_only.Fundamental')
    @patch('fintech_vnstock_only.Financial')
    @patch('fintech_vnstock_only.stock_historical_data')
    def test_valuation_metrics_success(self, mock_stock_data, mock_financial, mock_fundamental):
        """
        Test case 1: Ki·ªÉm tra h√†m valuation_metrics v·ªõi d·ªØ li·ªáu h·ª£p l·ªá
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o h√†m tr·∫£ v·ªÅ ƒë√∫ng k·∫øt qu·∫£ khi c√≥ ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
        """
        print("\nüß™ Test 1: valuation_metrics v·ªõi d·ªØ li·ªáu h·ª£p l·ªá")
        
        # Mock c√°c ƒë·ªëi t∆∞·ª£ng vnstock
        mock_fundamental_instance = Mock()
        mock_financial_instance = Mock()
        
        # Setup mock methods tr·∫£ v·ªÅ d·ªØ li·ªáu test
        mock_fundamental_instance.pe.return_value = self.mock_fundamental_data['pe']
        mock_fundamental_instance.pb.return_value = self.mock_fundamental_data['pb']
        mock_fundamental_instance.roe.return_value = self.mock_fundamental_data['roe']
        mock_fundamental_instance.debt_equity.return_value = self.mock_fundamental_data['debt_equity']
        mock_fundamental_instance.market_cap.return_value = self.mock_fundamental_data['market_cap']
        mock_fundamental_instance.dividend_yield.return_value = self.mock_fundamental_data['dividend_yield']
        mock_fundamental_instance.eps_growth.return_value = self.mock_fundamental_data['eps_growth']
        
        mock_financial_instance.current_ratio.return_value = self.mock_financial_data['current_ratio']
        mock_financial_instance.net_income.return_value = self.mock_financial_data['net_income']
        
        mock_stock_data.return_value = self.mock_price_data
        
        # Setup mock classes
        mock_fundamental.return_value = mock_fundamental_instance
        mock_financial.return_value = mock_financial_instance
        
        # G·ªçi h√†m c·∫ßn test
        result = valuation_metrics(self.test_ticker)
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        self.assertIsInstance(result, dict, "K·∫øt qu·∫£ ph·∫£i l√† dictionary")
        self.assertIn("PE", result, "Ph·∫£i c√≥ ch·ªâ s·ªë PE")
        self.assertEqual(result["PE"], 15.5, "PE ph·∫£i b·∫±ng 15.5")
        self.assertEqual(result["PB"], 2.1, "PB ph·∫£i b·∫±ng 2.1")
        self.assertEqual(result["ROE"], 18.5, "ROE ph·∫£i b·∫±ng 18.5")
        
        # Ki·ªÉm tra Earnings Yield ƒë∆∞·ª£c t√≠nh t·ª´ PE
        expected_earnings_yield = round((1 / 15.5) * 100, 2)
        self.assertEqual(result["Earnings_Yield"], expected_earnings_yield, 
                        "Earnings Yield ph·∫£i ƒë∆∞·ª£c t√≠nh ƒë√∫ng t·ª´ PE")
        
        # Ki·ªÉm tra PEG ƒë∆∞·ª£c t√≠nh t·ª´ PE v√† EPS Growth
        expected_peg = round(15.5 / 12.5, 2)
        self.assertEqual(result["PEG"], expected_peg, "PEG ph·∫£i ƒë∆∞·ª£c t√≠nh ƒë√∫ng")
        
        print("‚úÖ Test 1 PASSED: T·∫•t c·∫£ metrics ƒë∆∞·ª£c t√≠nh ƒë√∫ng")

    @patch('fintech_vnstock_only.Fundamental')
    @patch('fintech_vnstock_only.Financial')
    @patch('fintech_vnstock_only.stock_historical_data')
    def test_valuation_metrics_with_errors(self, mock_stock_data, mock_financial, mock_fundamental):
        """
        Test case 2: Ki·ªÉm tra h√†m valuation_metrics khi c√≥ l·ªói x·∫£y ra
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o h√†m x·ª≠ l√Ω l·ªói gracefully v√† kh√¥ng crash
        """
        print("\nüß™ Test 2: valuation_metrics v·ªõi l·ªói x·∫£y ra")
        
        # Mock ƒë·ªÉ throw exception
        mock_fundamental_instance = Mock()
        mock_financial_instance = Mock()
        
        # Setup mock ƒë·ªÉ throw exception cho m·ªôt s·ªë methods
        mock_fundamental_instance.pe.side_effect = Exception("API Error")
        mock_fundamental_instance.pb.return_value = 2.1  # M·ªôt s·ªë methods v·∫´n ho·∫°t ƒë·ªông
        mock_fundamental_instance.roe.side_effect = Exception("Network Error")
        
        mock_financial_instance.current_ratio.return_value = 1.8
        mock_financial_instance.net_income.side_effect = Exception("Data Error")
        
        mock_stock_data.return_value = self.mock_price_data
        
        mock_fundamental.return_value = mock_fundamental_instance
        mock_financial.return_value = mock_financial_instance
        
        # G·ªçi h√†m c·∫ßn test
        result = valuation_metrics(self.test_ticker)
        
        # Ki·ªÉm tra k·∫øt qu·∫£ - m·ªôt s·ªë metrics ph·∫£i l√† None do l·ªói
        self.assertIsInstance(result, dict, "K·∫øt qu·∫£ v·∫´n ph·∫£i l√† dictionary")
        self.assertIsNone(result["PE"], "PE ph·∫£i l√† None do l·ªói")
        self.assertEqual(result["PB"], 2.1, "PB v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
        self.assertIsNone(result["ROE"], "ROE ph·∫£i l√† None do l·ªói")
        self.assertIsNone(result["Earnings_Yield"], "Earnings Yield ph·∫£i l√† None do thi·∫øu PE")
        
        print("‚úÖ Test 2 PASSED: X·ª≠ l√Ω l·ªói th√†nh c√¥ng")

    def test_valuation_metrics_empty_ticker(self):
        """
        Test case 3: Ki·ªÉm tra v·ªõi ticker r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o h√†m x·ª≠ l√Ω input kh√¥ng h·ª£p l·ªá
        """
        print("\nüß™ Test 3: valuation_metrics v·ªõi ticker kh√¥ng h·ª£p l·ªá")
        
        # Test v·ªõi ticker r·ªóng
        with patch('fintech_vnstock_only.Fundamental') as mock_fundamental:
            mock_fundamental_instance = Mock()
            mock_fundamental_instance.pe.side_effect = Exception("Invalid ticker")
            mock_fundamental.return_value = mock_fundamental_instance
            
            result = valuation_metrics("")
            
            # K·∫øt qu·∫£ ph·∫£i l√† dictionary v·ªõi c√°c gi√° tr·ªã None
            self.assertIsInstance(result, dict, "K·∫øt qu·∫£ ph·∫£i l√† dictionary")
            # √çt nh·∫•t m·ªôt s·ªë metrics ph·∫£i l√† None
            self.assertTrue(any(value is None for value in result.values()), 
                           "Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt metric l√† None")
        
        print("‚úÖ Test 3 PASSED: X·ª≠ l√Ω ticker kh√¥ng h·ª£p l·ªá th√†nh c√¥ng")

    def test_display_results(self):
        """
        Test case 4: Ki·ªÉm tra h√†m display_results
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o h√†m hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥ng b·ªã l·ªói
        """
        print("\nüß™ Test 4: display_results")
        
        # D·ªØ li·ªáu test
        test_data = {
            "PE": 15.5,
            "PB": 2.1,
            "ROE": 18.5,
            "Current_Price": 99000,
            "Market_Cap": 50000000000
        }
        
        # Capture output ƒë·ªÉ ki·ªÉm tra
        import io
        import contextlib
        
        output = io.StringIO()
        with contextlib.redirect_stdout(output):
            display_results(test_data, "FPT")
        
        output_text = output.getvalue()
        
        # Ki·ªÉm tra output c√≥ ch·ª©a th√¥ng tin c·∫ßn thi·∫øt
        self.assertIn("FPT", output_text, "Output ph·∫£i ch·ª©a m√£ c·ªï phi·∫øu")
        self.assertIn("PE", output_text, "Output ph·∫£i ch·ª©a PE")
        self.assertIn("15.5", output_text, "Output ph·∫£i ch·ª©a gi√° tr·ªã PE")
        
        print("‚úÖ Test 4 PASSED: display_results ho·∫°t ƒë·ªông ƒë√∫ng")

    @patch('builtins.open', create=True)
    def test_save_to_file(self, mock_open):
        """
        Test case 5: Ki·ªÉm tra h√†m save_to_file
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o h√†m l∆∞u file th√†nh c√¥ng
        """
        print("\nüß™ Test 5: save_to_file")
        
        # Mock file object
        mock_file = MagicMock()
        mock_open.return_value.__enter__.return_value = mock_file
        
        # D·ªØ li·ªáu test
        test_data = {
            "PE": 15.5,
            "PB": 2.1,
            "ROE": 18.5
        }
        
        # G·ªçi h√†m
        save_to_file(test_data, "FPT", "test_file.txt")
        
        # Ki·ªÉm tra file ƒë∆∞·ª£c m·ªü ƒë√∫ng c√°ch
        mock_open.assert_called_once_with("test_file.txt", 'w', encoding='utf-8')
        
        # Ki·ªÉm tra file ƒë∆∞·ª£c write
        self.assertTrue(mock_file.write.called, "File ph·∫£i ƒë∆∞·ª£c write")
        
        print("‚úÖ Test 5 PASSED: save_to_file ho·∫°t ƒë·ªông ƒë√∫ng")

    def test_edge_cases(self):
        """
        Test case 6: Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p edge cases
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o code x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
        """
        print("\nüß™ Test 6: Edge cases")
        
        # Test v·ªõi PE = 0 (kh√¥ng th·ªÉ chia)
        test_data_zero_pe = {"PE": 0}
        
        # Test t√≠nh Earnings Yield v·ªõi PE = 0
        try:
            if test_data_zero_pe.get("PE") and test_data_zero_pe["PE"] > 0:
                earnings_yield = (1 / test_data_zero_pe["PE"]) * 100
            else:
                earnings_yield = None
            self.assertIsNone(earnings_yield, "Earnings Yield ph·∫£i l√† None khi PE = 0")
        except ZeroDivisionError:
            self.fail("Kh√¥ng ƒë∆∞·ª£c ph√©p c√≥ ZeroDivisionError")
        
        # Test v·ªõi EPS Growth = 0
        try:
            pe = 15.5
            eps_growth = 0
            if eps_growth and eps_growth > 0 and pe:
                peg = pe / eps_growth
            else:
                peg = None
            self.assertIsNone(peg, "PEG ph·∫£i l√† None khi EPS Growth = 0")
        except ZeroDivisionError:
            self.fail("Kh√¥ng ƒë∆∞·ª£c ph√©p c√≥ ZeroDivisionError")
        
        print("‚úÖ Test 6 PASSED: Edge cases ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng")


class TestIntegration(unittest.TestCase):
    """
    Test class cho integration testing
    
    M·ª•c ƒë√≠ch: Ki·ªÉm tra to√†n b·ªô workflow ho·∫°t ƒë·ªông ƒë√∫ng
    """
    
    @patch('fintech_vnstock_only.valuation_metrics')
    @patch('fintech_vnstock_only.display_results')
    @patch('fintech_vnstock_only.save_to_file')
    def test_full_workflow(self, mock_save, mock_display, mock_valuation):
        """
        Test case 7: Ki·ªÉm tra to√†n b·ªô workflow
        
        M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o c√°c h√†m ho·∫°t ƒë·ªông c√πng nhau
        """
        print("\nüß™ Test 7: Full workflow integration")
        
        # Mock data
        mock_data = {"PE": 15.5, "PB": 2.1, "ROE": 18.5}
        mock_valuation.return_value = mock_data
        
        # Import v√† ch·∫°y main workflow
        from fintech_vnstock_only import TICKER
        
        # Simulate main workflow
        result = mock_valuation(TICKER)
        mock_display(result, TICKER)
        mock_save(result, TICKER)
        
        # Ki·ªÉm tra c√°c h√†m ƒë∆∞·ª£c g·ªçi
        mock_valuation.assert_called_once_with(TICKER)
        mock_display.assert_called_once_with(mock_data, TICKER)
        mock_save.assert_called_once_with(mock_data, TICKER)
        
        print("‚úÖ Test 7 PASSED: Full workflow ho·∫°t ƒë·ªông ƒë√∫ng")


def run_tests():
    """
    H√†m ch·∫°y t·∫•t c·∫£ test cases
    
    M·ª•c ƒë√≠ch: Ch·∫°y t·∫•t c·∫£ tests v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    """
    print("üöÄ B·∫ÆT ƒê·∫¶U CH·∫†Y TEST CASES")
    print("=" * 60)
    
    # T·∫°o test suite
    test_suite = unittest.TestSuite()
    
    # Th√™m test cases
    test_classes = [TestVnstockValuationMetrics, TestIntegration]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # Ch·∫°y tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng k·∫øt
    print("\n" + "=" * 60)
    print("üìä K·∫æT QU·∫¢ TEST T·ªîNG K·∫æT:")
    print(f"‚úÖ Tests run: {result.testsRun}")
    print(f"‚ùå Failures: {len(result.failures)}")
    print(f"üí• Errors: {len(result.errors)}")
    
    if result.failures:
        print("\n‚ùå FAILURES:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print("\nüí• ERRORS:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    if result.wasSuccessful():
        print("\nüéâ T·∫§T C·∫¢ TESTS PASSED!")
        print("‚úÖ Code ho·∫°t ƒë·ªông ƒë√∫ng v√† s·∫µn s√†ng s·ª≠ d·ª•ng")
    else:
        print("\n‚ö†Ô∏è C√ì L·ªñI TRONG TESTS!")
        print("üîß C·∫ßn s·ª≠a l·ªói tr∆∞·ªõc khi s·ª≠ d·ª•ng")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    """
    Ch·∫°y tests khi file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
    """
    success = run_tests()
    
    # Exit code d·ª±a tr√™n k·∫øt qu·∫£ test
    exit_code = 0 if success else 1
    print(f"\nüèÅ Ch∆∞∆°ng tr√¨nh k·∫øt th√∫c v·ªõi exit code: {exit_code}")
    sys.exit(exit_code)
