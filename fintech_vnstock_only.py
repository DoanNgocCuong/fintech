# ===========================================
# üìä VNSTOCK - VALUATION METRICS CRAWLER
# ===========================================
# File n√†y ch·ªâ s·ª≠ d·ª•ng th∆∞ vi·ªán vnstock ƒë·ªÉ crawl c√°c ch·ªâ s·ªë ƒë·ªãnh gi√°
# Kh√¥ng s·ª≠ d·ª•ng xno API, ch·ªâ d√πng vnstock ƒë·ªÉ l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n Vi·ªát Nam

from vnstock import Fundamental, Financial, stock_historical_data
import pandas as pd
import numpy as np
from typing import Dict, Optional, Union

# M√£ c·ªï phi·∫øu m·∫∑c ƒë·ªãnh ƒë·ªÉ test - c√≥ th·ªÉ thay ƒë·ªïi
TICKER = "FPT"  # Thay b·∫±ng m√£ c·ªï phi·∫øu b·∫°n mu·ªën ph√¢n t√≠ch

def valuation_metrics(ticker: str = TICKER) -> Dict[str, Optional[Union[float, int]]]:
    """
    H√†m crawl c√°c ch·ªâ s·ªë ƒë·ªãnh gi√° (valuation metrics) ch·ªâ s·ª≠ d·ª•ng vnstock
    
    Args:
        ticker (str): M√£ c·ªï phi·∫øu c·∫ßn ph√¢n t√≠ch (v√≠ d·ª•: "FPT", "VCB", "HPG")
        
    Returns:
        Dict[str, Optional[Union[float, int]]]: Dictionary ch·ª©a c√°c ch·ªâ s·ªë ƒë·ªãnh gi√°
        - Key: T√™n ch·ªâ s·ªë (string)
        - Value: Gi√° tr·ªã ch·ªâ s·ªë (float/int ho·∫∑c None n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c)
        
    Ch·ª©c nƒÉng:
        - Crawl 12 ch·ªâ s·ªë ƒë·ªãnh gi√° quan tr·ªçng nh·∫•t
        - X·ª≠ l√Ω l·ªói gracefully - tr·∫£ v·ªÅ None thay v√¨ crash
        - T√≠nh to√°n m·ªôt s·ªë ch·ªâ s·ªë t·ª´ c√°c d·ªØ li·ªáu c√≥ s·∫µn
    """
    
    # Kh·ªüi t·∫°o dictionary ƒë·ªÉ l∆∞u k·∫øt qu·∫£
    data = {}
    
    # Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng vnstock ƒë·ªÉ l·∫•y d·ªØ li·ªáu
    # Fundamental: Ch·ª©a c√°c ch·ªâ s·ªë c∆° b·∫£n nh∆∞ P/E, P/B, ROE...
    # Financial: Ch·ª©a d·ªØ li·ªáu t√†i ch√≠nh nh∆∞ doanh thu, l·ª£i nhu·∫≠n...
    fundamental_obj = Fundamental(ticker)
    financial_obj = Financial(ticker)
    
    print(f"üîç ƒêang crawl d·ªØ li·ªáu cho m√£ {ticker}...")
    
    # ===========================================
    # 1. P/E RATIO (Price-to-Earnings) - T·ª∑ l·ªá gi√°/l·ª£i nhu·∫≠n
    # ===========================================
    # √ù nghƒ©a: Nh√† ƒë·∫ßu t∆∞ tr·∫£ bao nhi√™u ƒë·ªìng cho 1 ƒë·ªìng l·ª£i nhu·∫≠n
    # C√¥ng th·ª©c: P/E = Gi√° c·ªï phi·∫øu / EPS (Earnings Per Share)
    # V√≠ d·ª•: Gi√° = 100k, EPS = 5k ‚Üí P/E = 20
    # Gi√° tr·ªã t·ªët: 10-25, cao h∆°n c√≥ th·ªÉ overvalued
    try:
        data["PE"] = fundamental_obj.pe()  # L·∫•y P/E ratio t·ª´ vnstock
        print(f"‚úÖ P/E Ratio: {data['PE']}")
    except Exception as e:
        data["PE"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y P/E Ratio: {str(e)}")

    # ===========================================
    # 2. P/B RATIO (Price-to-Book) - T·ª∑ l·ªá gi√°/gi√° tr·ªã s·ªï s√°ch
    # ===========================================
    # √ù nghƒ©a: Gi√° c·ªï phi·∫øu so v·ªõi gi√° tr·ªã s·ªï s√°ch (book value)
    # C√¥ng th·ª©c: P/B = Gi√° c·ªï phi·∫øu / Book Value Per Share
    # V√≠ d·ª•: Gi√° = 50k, BVPS = 25k ‚Üí P/B = 2
    # Gi√° tr·ªã t·ªët: < 3, cao h∆°n c√≥ th·ªÉ overvalued
    try:
        data["PB"] = fundamental_obj.pb()  # L·∫•y P/B ratio t·ª´ vnstock
        print(f"‚úÖ P/B Ratio: {data['PB']}")
    except Exception as e:
        data["PB"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y P/B Ratio: {str(e)}")

    # ===========================================
    # 3. ROE (Return on Equity) - T·ª∑ su·∫•t sinh l·ªùi tr√™n v·ªën ch·ªß s·ªü h·ªØu
    # ===========================================
    # √ù nghƒ©a: Hi·ªáu qu·∫£ s·ª≠ d·ª•ng v·ªën ch·ªß s·ªü h·ªØu c·ªßa c√¥ng ty
    # C√¥ng th·ª©c: ROE = Net Income / Shareholders' Equity
    # V√≠ d·ª•: L·ª£i nhu·∫≠n = 100 t·ª∑, V·ªën CSH = 500 t·ª∑ ‚Üí ROE = 20%
    # Gi√° tr·ªã t·ªët: > 15%, cao h∆°n = hi·ªáu qu·∫£ t·ªët h∆°n
    try:
        data["ROE"] = fundamental_obj.roe()  # L·∫•y ROE t·ª´ vnstock
        print(f"‚úÖ ROE: {data['ROE']}%")
    except Exception as e:
        data["ROE"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y ROE: {str(e)}")

    # ===========================================
    # 4. DEBT/EQUITY RATIO - T·ª∑ l·ªá n·ª£/v·ªën ch·ªß s·ªü h·ªØu
    # ===========================================
    # √ù nghƒ©a: M·ª©c ƒë·ªô s·ª≠ d·ª•ng ƒë√≤n b·∫©y t√†i ch√≠nh c·ªßa c√¥ng ty
    # C√¥ng th·ª©c: D/E = Total Debt / Shareholders' Equity
    # V√≠ d·ª•: N·ª£ = 400 t·ª∑, V·ªën CSH = 200 t·ª∑ ‚Üí D/E = 2
    # Gi√° tr·ªã t·ªët: < 1, cao h∆°n = r·ªßi ro t√†i ch√≠nh cao h∆°n
    try:
        data["Debt_Equity"] = fundamental_obj.debt_equity()  # L·∫•y D/E t·ª´ vnstock
        print(f"‚úÖ Debt/Equity: {data['Debt_Equity']}")
    except Exception as e:
        data["Debt_Equity"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y Debt/Equity: {str(e)}")

    # ===========================================
    # 5. CURRENT RATIO - T·ª∑ s·ªë thanh to√°n hi·ªán h√†nh
    # ===========================================
    # √ù nghƒ©a: Kh·∫£ nƒÉng thanh to√°n n·ª£ ng·∫Øn h·∫°n c·ªßa c√¥ng ty
    # C√¥ng th·ª©c: Current Ratio = Current Assets / Current Liabilities
    # V√≠ d·ª•: T√†i s·∫£n ng·∫Øn h·∫°n = 300 t·ª∑, N·ª£ ng·∫Øn h·∫°n = 150 t·ª∑ ‚Üí Ratio = 2
    # Gi√° tr·ªã t·ªët: 1.5-3, th·∫•p h∆°n = kh√≥ thanh to√°n n·ª£
    try:
        data["Current_Ratio"] = financial_obj.current_ratio()  # L·∫•y Current Ratio t·ª´ vnstock
        print(f"‚úÖ Current Ratio: {data['Current_Ratio']}")
    except Exception as e:
        data["Current_Ratio"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y Current Ratio: {str(e)}")

    # ===========================================
    # 6. EARNINGS YIELD - T·ª∑ su·∫•t sinh l·ªùi t·ª´ l·ª£i nhu·∫≠n
    # ===========================================
    # √ù nghƒ©a: Ng∆∞·ª£c c·ªßa P/E - t·ª∑ l·ªá sinh l·ªùi tr√™n gi√° c·ªï phi·∫øu
    # C√¥ng th·ª©c: Earnings Yield = EPS / Gi√° c·ªï phi·∫øu = 1 / P/E
    # V√≠ d·ª•: EPS = 5k, Gi√° = 100k ‚Üí Earnings Yield = 5%
    # Gi√° tr·ªã t·ªët: > 5%, cao h∆°n = sinh l·ªùi t·ªët h∆°n
    try:
        if data.get("PE") and data["PE"] > 0:  # Ki·ªÉm tra P/E c√≥ h·ª£p l·ªá kh√¥ng
            data["Earnings_Yield"] = round((1 / data["PE"]) * 100, 2)  # T√≠nh t·ª´ P/E
            print(f"‚úÖ Earnings Yield: {data['Earnings_Yield']}%")
        else:
            data["Earnings_Yield"] = None
            print("‚ùå Kh√¥ng th·ªÉ t√≠nh Earnings Yield do thi·∫øu P/E")
    except Exception as e:
        data["Earnings_Yield"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ t√≠nh Earnings Yield: {str(e)}")

    # ===========================================
    # 7. PEG RATIO (Price/Earnings to Growth) - T·ª∑ l·ªá P/E so v·ªõi tƒÉng tr∆∞·ªüng
    # ===========================================
    # √ù nghƒ©a: K·∫øt h·ª£p P/E v√† t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng EPS ƒë·ªÉ ƒë√°nh gi√° ƒë·ªãnh gi√° h·ª£p l√Ω
    # C√¥ng th·ª©c: PEG = P/E / EPS Growth Rate
    # V√≠ d·ª•: P/E = 20, EPS Growth = 25% ‚Üí PEG = 0.8
    # Gi√° tr·ªã t·ªët: < 1 = undervalued, > 1 = overvalued
    try:
        # L·∫•y EPS growth t·ª´ vnstock
        eps_growth = fundamental_obj.eps_growth()
        if eps_growth and eps_growth > 0 and data.get("PE"):
            data["PEG"] = round(data["PE"] / eps_growth, 2)  # T√≠nh PEG
            print(f"‚úÖ PEG Ratio: {data['PEG']}")
        else:
            data["PEG"] = None
            print("‚ùå Kh√¥ng th·ªÉ t√≠nh PEG do thi·∫øu d·ªØ li·ªáu tƒÉng tr∆∞·ªüng")
    except Exception as e:
        data["PEG"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ t√≠nh PEG: {str(e)}")

    # ===========================================
    # 8. MARKET CAP - V·ªën h√≥a th·ªã tr∆∞·ªùng
    # ===========================================
    # √ù nghƒ©a: T·ªïng gi√° tr·ªã th·ªã tr∆∞·ªùng c·ªßa t·∫•t c·∫£ c·ªï phi·∫øu ƒëang l∆∞u h√†nh
    # C√¥ng th·ª©c: Market Cap = Gi√° c·ªï phi·∫øu √ó S·ªë c·ªï phi·∫øu l∆∞u h√†nh
    # V√≠ d·ª•: Gi√° = 100k, S·ªë c·ªï phi·∫øu = 1 t·ª∑ ‚Üí Market Cap = 100,000 t·ª∑ VND
    # S·ª≠ d·ª•ng: So s√°nh quy m√¥ c√¥ng ty, t√≠nh c√°c t·ª∑ l·ªá kh√°c
    try:
        data["Market_Cap"] = fundamental_obj.market_cap()  # L·∫•y Market Cap t·ª´ vnstock
        print(f"‚úÖ Market Cap: {data['Market_Cap']:,} VND")
    except Exception as e:
        data["Market_Cap"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y Market Cap: {str(e)}")

    # ===========================================
    # 9. DIVIDEND YIELD - T·ª∑ su·∫•t c·ªï t·ª©c
    # ===========================================
    # √ù nghƒ©a: T·ª∑ l·ªá c·ªï t·ª©c so v·ªõi gi√° c·ªï phi·∫øu
    # C√¥ng th·ª©c: Dividend Yield = C·ªï t·ª©c nƒÉm / Gi√° c·ªï phi·∫øu
    # V√≠ d·ª•: C·ªï t·ª©c = 2k, Gi√° = 50k ‚Üí Dividend Yield = 4%
    # Gi√° tr·ªã t·ªët: > 3%, cao h∆°n = thu nh·∫≠p t·ª´ c·ªï t·ª©c t·ªët h∆°n
    try:
        data["Dividend_Yield"] = fundamental_obj.dividend_yield()  # L·∫•y Dividend Yield t·ª´ vnstock
        print(f"‚úÖ Dividend Yield: {data['Dividend_Yield']}%")
    except Exception as e:
        data["Dividend_Yield"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y Dividend Yield: {str(e)}")

    # ===========================================
    # 10. EPS GROWTH - TƒÉng tr∆∞·ªüng l·ª£i nhu·∫≠n tr√™n m·ªói c·ªï phi·∫øu
    # ===========================================
    # √ù nghƒ©a: T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng l·ª£i nhu·∫≠n tr√™n m·ªói c·ªï phi·∫øu
    # C√¥ng th·ª©c: EPS Growth = (EPS nƒÉm nay - EPS nƒÉm tr∆∞·ªõc) / EPS nƒÉm tr∆∞·ªõc √ó 100%
    # V√≠ d·ª•: EPS 2023 = 6k, EPS 2022 = 5k ‚Üí Growth = 20%
    # Gi√° tr·ªã t·ªët: > 10%, cao h∆°n = tƒÉng tr∆∞·ªüng t·ªët h∆°n
    try:
        data["EPS_Growth"] = fundamental_obj.eps_growth()  # L·∫•y EPS Growth t·ª´ vnstock
        print(f"‚úÖ EPS Growth: {data['EPS_Growth']}%")
    except Exception as e:
        data["EPS_Growth"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y EPS Growth: {str(e)}")

    # ===========================================
    # 11. PRICE - Gi√° c·ªï phi·∫øu hi·ªán t·∫°i
    # ===========================================
    # √ù nghƒ©a: Gi√° giao d·ªãch hi·ªán t·∫°i c·ªßa c·ªï phi·∫øu
    # S·ª≠ d·ª•ng: L√†m c∆° s·ªü ƒë·ªÉ t√≠nh c√°c t·ª∑ l·ªá kh√°c, so s√°nh v·ªõi gi√° tr·ªã n·ªôi t·∫°i
    try:
        # L·∫•y d·ªØ li·ªáu gi√° g·∫ßn nh·∫•t t·ª´ vnstock
        price_data = stock_historical_data(symbol=ticker, start_date='2024-01-01', end_date='2024-12-31')
        if not price_data.empty:
            data["Current_Price"] = price_data['close'].iloc[-1]  # L·∫•y gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t
            print(f"‚úÖ Current Price: {data['Current_Price']:,} VND")
        else:
            data["Current_Price"] = None
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° c·ªï phi·∫øu")
    except Exception as e:
        data["Current_Price"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° c·ªï phi·∫øu: {str(e)}")

    # ===========================================
    # 12. SIMPLE DCF - ƒê·ªãnh gi√° chi·∫øt kh·∫•u d√≤ng ti·ªÅn ƒë∆°n gi·∫£n
    # ===========================================
    # √ù nghƒ©a: ∆Ø·ªõc t√≠nh gi√° tr·ªã n·ªôi t·∫°i c·ªßa c·ªï phi·∫øu d·ª±a tr√™n d√≤ng ti·ªÅn t∆∞∆°ng lai
    # C√¥ng th·ª©c: DCF = Œ£ [FCF / (1 + discount_rate)^n]
    # L∆∞u √Ω: ƒê√¢y l√† t√≠nh to√°n ƒë∆°n gi·∫£n, th·ª±c t·∫ø c·∫ßn ph√¢n t√≠ch chi ti·∫øt h∆°n
    try:
        # L·∫•y d·ªØ li·ªáu t√†i ch√≠nh ƒë·ªÉ ∆∞·ªõc t√≠nh FCF
        # Gi·∫£ s·ª≠ FCF = Net Income (ƒë∆°n gi·∫£n h√≥a)
        net_income = financial_obj.net_income()
        if net_income and net_income > 0:
            # ∆Ø·ªõc t√≠nh FCF = 80% c·ªßa Net Income (gi·∫£ ƒë·ªãnh)
            estimated_fcf = net_income * 0.8
            # T·ª∑ l·ªá chi·∫øt kh·∫•u 10% (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
            discount_rate = 0.1
            # T√≠nh DCF ƒë∆°n gi·∫£n cho 5 nƒÉm
            dcf_value = 0
            for year in range(1, 6):  # 5 nƒÉm
                dcf_value += estimated_fcf / ((1 + discount_rate) ** year)
            
            data["Simple_DCF"] = round(dcf_value, 2)
            print(f"‚úÖ Simple DCF: {data['Simple_DCF']:,} VND")
        else:
            data["Simple_DCF"] = None
            print("‚ùå Kh√¥ng th·ªÉ t√≠nh DCF do thi·∫øu d·ªØ li·ªáu Net Income")
    except Exception as e:
        data["Simple_DCF"] = None
        print(f"‚ùå Kh√¥ng th·ªÉ t√≠nh DCF: {str(e)}")

    # ===========================================
    # T·ªîNG K·∫æT V√Ä HI·ªÇN TH·ªä K·∫æT QU·∫¢
    # ===========================================
    print(f"\nüìä T·ªïng k·∫øt {len(data)} ch·ªâ s·ªë ƒë·ªãnh gi√° cho m√£ {ticker}:")
    print("=" * 60)
    
    return data


def display_results(data: Dict[str, Optional[Union[float, int]]], ticker: str) -> None:
    """
    Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch m·ªôt c√°ch ƒë·∫πp m·∫Øt v√† d·ªÖ hi·ªÉu
    
    Args:
        data (Dict): Dictionary ch·ª©a c√°c ch·ªâ s·ªë ƒë√£ crawl ƒë∆∞·ª£c
        ticker (str): M√£ c·ªï phi·∫øu ƒë√£ ph√¢n t√≠ch
    """
    print(f"\nüéØ B√ÅO C√ÅO PH√ÇN T√çCH ƒê·ªäNH GI√Å - M√É {ticker}")
    print("=" * 60)
    
    # ƒê·ªãnh nghƒ©a c√°c nh√≥m ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã c√≥ t·ªï ch·ª©c
    valuation_metrics = ["PE", "PB", "PEG", "Earnings_Yield", "Dividend_Yield", "Simple_DCF"]
    profitability_metrics = ["ROE", "EPS_Growth"]
    financial_health_metrics = ["Debt_Equity", "Current_Ratio"]
    market_metrics = ["Market_Cap", "Current_Price"]
    
    # Hi·ªÉn th·ªã t·ª´ng nh√≥m
    print("\nüìà CH·ªà S·ªê ƒê·ªäNH GI√Å:")
    for metric in valuation_metrics:
        if metric in data and data[metric] is not None:
            print(f"  {metric:20}: {data[metric]:>10}")
        else:
            print(f"  {metric:20}: {'N/A':>10}")
    
    print("\nüí∞ CH·ªà S·ªê SINH L·ªúI:")
    for metric in profitability_metrics:
        if metric in data and data[metric] is not None:
            print(f"  {metric:20}: {data[metric]:>10}")
        else:
            print(f"  {metric:20}: {'N/A':>10}")
    
    print("\nüè• T√åNH H√åNH T√ÄI CH√çNH:")
    for metric in financial_health_metrics:
        if metric in data and data[metric] is not None:
            print(f"  {metric:20}: {data[metric]:>10}")
        else:
            print(f"  {metric:20}: {'N/A':>10}")
    
    print("\nüìä TH√îNG TIN TH·ªä TR∆Ø·ªúNG:")
    for metric in market_metrics:
        if metric in data and data[metric] is not None:
            print(f"  {metric:20}: {data[metric]:>10}")
        else:
            print(f"  {metric:20}: {'N/A':>10}")


def save_to_file(data: Dict[str, Optional[Union[float, int]]], ticker: str, filename: str = None) -> None:
    """
    L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o file text
    
    Args:
        data (Dict): Dictionary ch·ª©a c√°c ch·ªâ s·ªë
        ticker (str): M√£ c·ªï phi·∫øu
        filename (str): T√™n file (t√πy ch·ªçn)
    """
    if filename is None:
        filename = f"valuation_report_{ticker}.txt"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"B√ÅO C√ÅO PH√ÇN T√çCH ƒê·ªäNH GI√Å - M√É {ticker}\n")
            f.write("=" * 50 + "\n\n")
            
            for metric, value in data.items():
                if value is not None:
                    f.write(f"{metric:20}: {value:>10}\n")
                else:
                    f.write(f"{metric:20}: {'N/A':>10}\n")
        
        print(f"üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o file: {filename}")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ l∆∞u file: {str(e)}")


if __name__ == "__main__":
    """
    H√†m main - ch·∫°y ch∆∞∆°ng tr√¨nh khi file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
    """
    print("üöÄ B·∫ÆT ƒê·∫¶U CH∆Ø∆†NG TR√åNH PH√ÇN T√çCH ƒê·ªäNH GI√Å C·ªî PHI·∫æU")
    print("=" * 60)
    
    # Crawl d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu m·∫∑c ƒë·ªãnh
    result = valuation_metrics(TICKER)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫πp m·∫Øt
    display_results(result, TICKER)
    
    # L∆∞u k·∫øt qu·∫£ v√†o file
    save_to_file(result, TICKER)
    
    print(f"\n‚úÖ Ho√†n th√†nh ph√¢n t√≠ch cho m√£ {TICKER}!")
    print("üí° Tip: Thay ƒë·ªïi bi·∫øn TICKER ·ªü ƒë·∫ßu file ƒë·ªÉ ph√¢n t√≠ch m√£ kh√°c")
