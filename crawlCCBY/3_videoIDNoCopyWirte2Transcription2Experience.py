"""
YouTube Video Transcription to Experience Analysis Tool

M√¥ t·∫£:
    C√¥ng c·ª• l·∫•y transcription t·ª´ video YouTube v√† ph√¢n t√≠ch ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám, tri th·ª©c.
    S·ª≠ d·ª•ng YouTube Transcript API ƒë·ªÉ l·∫•y ph·ª• ƒë·ªÅ v√† OpenAI ƒë·ªÉ ph√¢n t√≠ch n·ªôi dung.

Ch·ª©c nƒÉng:
    - L·∫•y transcription t·ª´ video YouTube b·∫±ng video ID
    - Ph√¢n t√≠ch transcription b·∫±ng AI ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám
    - T·ªïng h·ª£p ki·∫øn th·ª©c v√† insights t·ª´ n·ªôi dung video
    - H·ªó tr·ª£ command line arguments

C√°ch s·ª≠ d·ª•ng:
    # Ph√¢n t√≠ch video c·ª• th·ªÉ
    python 3_videoIDNoCopyWirte2Transcription2Experience.py --video-id "VIDEO_ID"
    
    # S·ª≠ d·ª•ng video m·∫∑c ƒë·ªãnh
    python 3_videoIDNoCopyWirte2Transcription2Experience.py
    
    # L∆∞u k·∫øt qu·∫£ v√†o file
    python 3_videoIDNoCopyWirte2Transcription2Experience.py --video-id "VIDEO_ID" --output experience.txt

Y√™u c·∫ßu:
    - OPENAI_API_KEY trong file .env
    - Th∆∞ vi·ªán: youtube-transcript-api, python-dotenv, openai

Quy tr√¨nh:
    1. L·∫•y transcription t·ª´ video YouTube
    2. Ph√¢n t√≠ch n·ªôi dung b·∫±ng AI ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám
    3. T·ªïng h·ª£p insights v√† ki·∫øn th·ª©c
    4. Tr·∫£ v·ªÅ b√°o c√°o kinh nghi·ªám chi ti·∫øt

T√°c gi·∫£: AI Assistant
Ng√†y t·∫°o: 2025
"""

import os
import sys
import argparse
from dotenv import load_dotenv
from youtube_transcript_api import YouTubeTranscriptApi
import openai

# Load environment variables from .env file
load_dotenv()

def getTranscription(video_id):
    """
    L·∫•y transcription t·ª´ video YouTube
    """
    try:
        print(f"üìù ƒêang l·∫•y transcription cho video: {video_id}")
        
        # Th·ª≠ l·∫•y transcript v·ªõi c√°c ng√¥n ng·ªØ kh√°c nhau
        try:
            api = YouTubeTranscriptApi()
            transcript = api.fetch(video_id, languages=['vi', 'en'])
        except:
            # N·∫øu kh√¥ng c√≥ transcript, th·ª≠ l·∫•y transcript m·∫∑c ƒë·ªãnh
            api = YouTubeTranscriptApi()
            transcript = api.fetch(video_id)
        
        # K·∫øt h·ª£p t·∫•t c·∫£ c√°c ƒëo·∫°n transcript th√†nh m·ªôt vƒÉn b·∫£n
        full_text = ' '.join([segment.text for segment in transcript])
        print(f"‚úÖ ƒê√£ l·∫•y transcription th√†nh c√¥ng ({len(full_text)} k√Ω t·ª±)")
        return full_text
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y transcription: {e}")
        print("üí° G·ª£i √Ω: Video c√≥ th·ªÉ kh√¥ng c√≥ ph·ª• ƒë·ªÅ ho·∫∑c kh√¥ng h·ªó tr·ª£ transcript")
        return None

def transcription2Experience(transcription):
    """
    Ph√¢n t√≠ch transcription ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám v√† tri th·ª©c
    """
    if not transcription:
        return "Kh√¥ng c√≥ transcription ƒë·ªÉ ph√¢n t√≠ch"
    
    prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch n·ªôi dung video ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám v√† tri th·ª©c.

Nhi·ªám v·ª•: Ph√¢n t√≠ch transcription video sau v√† tr√≠ch xu·∫•t:
1. **Kinh nghi·ªám ch√≠nh** (3-5 ƒëi·ªÉm quan tr·ªçng nh·∫•t)
2. **Ki·∫øn th·ª©c chuy√™n m√¥n** (th√¥ng tin k·ªπ thu·∫≠t, ph∆∞∆°ng ph√°p)
3. **B√†i h·ªçc r√∫t ra** (insights, tips, l·ªùi khuy√™n)
4. **·ª®ng d·ª•ng th·ª±c t·∫ø** (c√°ch √°p d·ª•ng v√†o cu·ªôc s·ªëng/c√¥ng vi·ªác)
5. **T√≥m t·∫Øt ng·∫Øn g·ªçn** (1-2 c√¢u t√≥m t·∫Øt n·ªôi dung ch√≠nh)

Format tr·∫£ v·ªÅ:
## KINH NGHI·ªÜM CH√çNH
- [ƒêi·ªÉm 1]
- [ƒêi·ªÉm 2]
- [ƒêi·ªÉm 3]

## KI·∫æN TH·ª®C CHUY√äN M√îN
- [Ki·∫øn th·ª©c 1]
- [Ki·∫øn th·ª©c 2]

## B√ÄI H·ªåC R√öT RA
- [B√†i h·ªçc 1]
- [B√†i h·ªçc 2]

## ·ª®NG D·ª§NG TH·ª∞C T·∫æ
- [·ª®ng d·ª•ng 1]
- [·ª®ng d·ª•ng 2]

## T√ìM T·∫ÆT
[T√≥m t·∫Øt ng·∫Øn g·ªçn]

Transcription:
{transcription}
"""

    try:
        print("ü§ñ ƒêang ph√¢n t√≠ch transcription b·∫±ng AI...")
        client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {'role': 'system', 'content': 'B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch n·ªôi dung video ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám v√† tri th·ª©c.'},
                {'role': 'user', 'content': prompt}
            ],
            max_tokens=2000,
            temperature=0.3
        )
        
        experience = response.choices[0].message.content.strip()
        print("‚úÖ Ph√¢n t√≠ch ho√†n th√†nh")
        return experience
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch b·∫±ng AI: {e}")
        return f"L·ªói ph√¢n t√≠ch: {e}"

def videoID2Transcription2Experience(video_id):
    """
    Quy tr√¨nh ho√†n ch·ªânh: Video ID -> Transcription -> Experience
    """
    print(f"üé¨ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch video: {video_id}")
    print("=" * 60)
    
    # B∆∞·ªõc 1: L·∫•y transcription
    transcription = getTranscription(video_id)
    if not transcription:
        return None
    
    # B∆∞·ªõc 2: Ph√¢n t√≠ch ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám
    experience = transcription2Experience(transcription)
    
    return {
        'video_id': video_id,
        'transcription': transcription,
        'experience': experience
    }

def main():
    """
    Main function ƒë·ªÉ x·ª≠ l√Ω command line arguments
    """
    parser = argparse.ArgumentParser(
        description='Ph√¢n t√≠ch video YouTube ƒë·ªÉ tr√≠ch xu·∫•t kinh nghi·ªám v√† tri th·ª©c',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python 3_videoIDNoCopyWirte2Transcription2Experience.py --video-id "iaxoL4VMB_o"
  python 3_videoIDNoCopyWirte2Transcription2Experience.py  # S·ª≠ d·ª•ng video m·∫∑c ƒë·ªãnh
  python 3_videoIDNoCopyWirte2Transcription2Experience.py --video-id "VIDEO_ID" --output experience.txt
        """
    )
    
    parser.add_argument(
        '--video-id', 
        help='YouTube video ID ƒë·ªÉ ph√¢n t√≠ch'
    )
    
    parser.add_argument(
        '--output', 
        help='File ƒë·ªÉ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch'
    )
    
    args = parser.parse_args()
    
    # Ki·ªÉm tra API key
    openai_key = os.getenv('OPENAI_API_KEY')
    if not openai_key:
        print("‚ùå Error: OPENAI_API_KEY not found in environment variables")
        print("   Please set OPENAI_API_KEY in your .env file")
        return 1
    
    # L·∫•y video ID
    video_id = args.video_id if args.video_id else "iaxoL4VMB_o"
    
    try:
        # Th·ª±c hi·ªán ph√¢n t√≠ch
        result = videoID2Transcription2Experience(video_id)
        
        if result:
            print("\n" + "=" * 60)
            print("üìä K·∫æT QU·∫¢ PH√ÇN T√çCH")
            print("=" * 60)
            print(f"üé¨ Video ID: {result['video_id']}")
            print(f"üìù Transcription length: {len(result['transcription'])} characters")
            print("\nüß† KINH NGHI·ªÜM V√Ä TRI TH·ª®C:")
            print("-" * 40)
            print(result['experience'])
            
            # L∆∞u k·∫øt qu·∫£ v√†o file n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if args.output:
                with open(args.output, 'w', encoding='utf-8') as f:
                    f.write(f"Video ID: {result['video_id']}\n")
                    f.write(f"Transcription Length: {len(result['transcription'])} characters\n")
                    f.write(f"\nTranscription:\n{result['transcription']}\n")
                    f.write(f"\nExperience Analysis:\n{result['experience']}\n")
                print(f"\nüìù K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {args.output}")
            
            return 0
        else:
            print("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch video")
            return 1
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1

if __name__ == "__main__":
    # Ch·∫°y main function v·ªõi command line arguments
    exit_code = main()
    sys.exit(exit_code)