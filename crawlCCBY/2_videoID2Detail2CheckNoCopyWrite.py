"""
YouTube Video Copyright Checker Tool

M√¥ t·∫£:
    C√¥ng c·ª• ki·ªÉm tra video YouTube c√≥ vi ph·∫°m b·∫£n quy·ªÅn hay kh√¥ng.
    S·ª≠ d·ª•ng YouTube API ƒë·ªÉ l·∫•y th√¥ng tin video v√† OpenAI ƒë·ªÉ ph√¢n t√≠ch m√¥ t·∫£.

Ch·ª©c nƒÉng:
    - L·∫•y th√¥ng tin chi ti·∫øt video t·ª´ YouTube API (title, description, license)
    - Ki·ªÉm tra gi·∫•y ph√©p Creative Commons
    - S·ª≠ d·ª•ng AI (OpenAI) ƒë·ªÉ ph√¢n t√≠ch m√¥ t·∫£ video t√¨m d·∫•u hi·ªáu vi ph·∫°m b·∫£n quy·ªÅn
    - Tr·∫£ v·ªÅ video ID n·∫øu video an to√†n ƒë·ªÉ s·ª≠ d·ª•ng
    - H·ªó tr·ª£ command line arguments

C√°ch s·ª≠ d·ª•ng:
    # Ki·ªÉm tra video c·ª• th·ªÉ
    python 2_videoID2Detail2CheckNoCopyWrite.py --video-id "VIDEO_ID"
    
    # S·ª≠ d·ª•ng video m·∫∑c ƒë·ªãnh
    python 2_videoID2Detail2CheckNoCopyWrite.py
    
    # L∆∞u k·∫øt qu·∫£ v√†o file
    python 2_videoID2Detail2CheckNoCopyWrite.py --video-id "VIDEO_ID" --output safe_video.txt

Y√™u c·∫ßu:
    - YOUTUBE_API_KEY trong file .env
    - OPENAI_API_KEY trong file .env
    - Th∆∞ vi·ªán: requests, python-dotenv, openai

Quy tr√¨nh ki·ªÉm tra:
    1. L·∫•y th√¥ng tin video t·ª´ YouTube API
    2. Ki·ªÉm tra license c√≥ ph·∫£i Creative Commons kh√¥ng
    3. Ph√¢n t√≠ch m√¥ t·∫£ video b·∫±ng AI ƒë·ªÉ t√¨m d·∫•u hi·ªáu b·∫£n quy·ªÅn
    4. Tr·∫£ v·ªÅ video ID n·∫øu an to√†n, None n·∫øu c√≥ vi ph·∫°m

T√°c gi·∫£: AI Assistant
Ng√†y t·∫°o: 2025
"""

import os
import sys
import argparse
import requests
from dotenv import load_dotenv
import openai

# Load environment variables from .env file
load_dotenv()

def getVideoDetails(video_id, api_key=None):
    """
    Get video details including description and status from YouTube API
    """
    if api_key is None:
        api_key = os.getenv('YOUTUBE_API_KEY')
        if api_key is None:
            raise ValueError("YouTube API key not found. Please set YOUTUBE_API_KEY in your .env file")
    
    url = "https://www.googleapis.com/youtube/v3/videos"
    params = {
        "part": "status,snippet",
        "id": video_id,
        "key": api_key
    }
    
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data['items']:
            return data['items'][0]
        else:
            return None
    else:
        print(f"Error getting video details: {response.status_code}")
        return None

def getDescription(video_id):
    """
    Get video description from YouTube API
    """
    video_details = getVideoDetails(video_id)
    if video_details and 'snippet' in video_details:
        return video_details['snippet'].get('description', '')
    return ''

def getVideoLicense(video_id):
    """
    Get video license information from YouTube API
    """
    video_details = getVideoDetails(video_id)
    if video_details and 'status' in video_details:
        return video_details['status'].get('license', '')
    return ''

def LLMcheckNoCopyWrite(input_description):
    """
    Use OpenAI to check if description has copyright violations
    Returns: True if no copyright violation, False if has copyright violation
    """
    prompt = (
        "You are an AI assistant.\n"
        "Your task: Analyze the following YouTube video description to determine if it contains any copyright violations or copyrighted content.\n"
        "Look for:\n"
        "- Copyright notices (¬©, Copyright, B·∫£n quy·ªÅn)\n"
        "- Claims of ownership by companies or individuals\n"
        "- Restrictions on copying or distribution\n"
        "- Trademarked content or brand names\n"
        "- Any statements indicating the content is copyrighted\n\n"
        "Return True if the description appears to be copyright-free or explicitly states it's free to use.\n"
        "Return False if the description contains copyright claims or restrictions.\n"
        "Only return 'True' or 'False', nothing else.\n\n"
        f"Description:\n{input_description}"
    )

    try:
        client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {'role': 'system', 'content': 'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI.'},
                {'role': 'user', 'content': prompt}
            ],
            max_tokens=5,
            temperature=0
        )
        content = response.choices[0].message.content.strip()
        print(f"ü§ñ LLM Response: {content}")
        return content.lower().startswith("true")
    except Exception as e:
        print(f"‚ùå Error in LLM analysis: {e}")
        return False

def checkVideoCopyrightAndReturnID(video_id):
    """
    Check if video has no copyright violations and return video ID if safe
    Returns: video_id if safe, None if has copyright issues
    """
    print(f"\nüîç Checking video ID: {video_id}")
    
    # Get video details
    description = getDescription(video_id)
    license_info = getVideoLicense(video_id)
    
    print(f"Video License: {license_info}")
    print(f"Description: {description[:200]}...")
    
    # Check if it's Creative Commons license
    if license_info == 'creativeCommon':
        print("‚úÖ Video has Creative Commons license")
        # Check description for copyright claims
        is_safe = LLMcheckNoCopyWrite(description)
        
        if is_safe:
            print(f"‚úÖ Video {video_id} is safe to use - no copyright violations detected")
            return video_id
        else:
            print(f"‚ùå Video {video_id} has copyright restrictions in description")
            return None
    else:
        print("‚ùå Video does not have Creative Commons license")
        return None

def main():
    """
    Main function to handle single video ID processing
    """
    parser = argparse.ArgumentParser(
        description='Check a single YouTube video for copyright restrictions',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python 2_videoID2Detail2CheckNoCopyWrite.py --video-id "4MhK5C37_fI"
  python 2_videoID2Detail2CheckNoCopyWrite.py  # Uses default video ID
        """
    )
    
    parser.add_argument(
        '--video-id', 
        help='YouTube video ID to check'
    )
    
    parser.add_argument(
        '--output', 
        help='Output file to save safe video ID'
    )
    
    args = parser.parse_args()
    
    # Check if API keys are available
    youtube_key = os.getenv('YOUTUBE_API_KEY')
    openai_key = os.getenv('OPENAI_API_KEY')
    
    if not youtube_key:
        print("‚ùå Error: YOUTUBE_API_KEY not found in environment variables")
        print("   Please set YOUTUBE_API_KEY in your .env file")
        return 1
    
    if not openai_key:
        print("‚ùå Error: OPENAI_API_KEY not found in environment variables")
        print("   Please set OPENAI_API_KEY in your .env file")
        return 1
    
    # Get video ID
    video_id = args.video_id if args.video_id else "iaxoL4VMB_o"
    
    print(f"üé¨ Processing video ID: {video_id}")
    print("=" * 50)
    
    try:
        safe_video_id = checkVideoCopyrightAndReturnID(video_id)
        
        if safe_video_id:
            print(f"‚úÖ RESULT: Video {safe_video_id} is SAFE to use")
            if args.output:
                with open(args.output, 'w') as f:
                    f.write(safe_video_id)
                print(f"üìù Safe video ID saved to: {args.output}")
            return 0
        else:
            print(f"‚ùå RESULT: Video {video_id} has COPYRIGHT restrictions")
            return 1
            
    except Exception as e:
        print(f"‚ùå Error processing video: {e}")
        return 1

if __name__ == "__main__":
    # Run the main function with command line arguments
    exit_code = main()
    sys.exit(exit_code)